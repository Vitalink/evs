package org.imec.ivlab.datagenerator.uploader.service.callback.impl;

import org.apache.commons.io.FileUtils;
import org.apache.log4j.Logger;
import org.imec.ivlab.core.model.upload.TransactionType;
import org.imec.ivlab.core.model.patient.model.Patient;
import org.imec.ivlab.core.util.FileUtil;
import org.imec.ivlab.core.version.LocalVersionReader;
import org.imec.ivlab.datagenerator.uploader.UploaderHelper;
import org.imec.ivlab.datagenerator.uploader.exception.CallbackException;
import org.imec.ivlab.datagenerator.uploader.model.Action;
import org.imec.ivlab.datagenerator.uploader.service.callback.Callback;

import java.io.File;
import java.io.IOException;

public class FileUploadCallback implements Callback {

    private final static Logger log = Logger.getLogger(FileUploadCallback.class);

    private File rootFolder;
    private File uploadFile;

    private Action action;
    private Patient patient;
    private String actorID;
    private TransactionType transactionType;

    public FileUploadCallback(File rootFolder, File uploadFile, Action action, Patient patient, String actorID, TransactionType transactionType) {
        this.rootFolder = rootFolder;
        this.uploadFile = uploadFile;
        this.action = action;
        this.patient = patient;
        this.actorID = actorID;
        this.transactionType = transactionType;
    }

    @Override
    public void pass() throws CallbackException {

        File processedFile = UploaderHelper.getProcessedLocationForInstruction(rootFolder, uploadFile, patient.getKey(), actorID, action, transactionType);

        try {
            log.debug("Will move file from upload: " + uploadFile.getAbsolutePath() + ", location to processed location: " + processedFile.getAbsolutePath());
            FileUtils.copyFile(uploadFile, processedFile, false);
            FileUtils.forceDelete(uploadFile);
        } catch (IOException e) {
            throw new CallbackException("Error when moving file from upload location to processed location. Original location: " + uploadFile.getAbsolutePath() + ". New location: " + processedFile.getAbsolutePath(), e);
        }


    }

    @Override
    public void fail(String message) throws CallbackException {

        File processedFile = UploaderHelper.getProcessedLocationForInstruction(rootFolder, uploadFile, patient.getKey(), actorID, action, transactionType);
        File errorMessageFile = FileUtil.getFileWithNewExtension(processedFile, "err");

        try {
            log.debug("Will move file from upload location to processed location: " + processedFile.getAbsolutePath());
            FileUtils.copyFile(uploadFile, processedFile, false);
            FileUtils.forceDelete(uploadFile);
        } catch (IOException e) {
            log.error("Error when moving file from upload location to processed location. Original location: " + uploadFile.getAbsolutePath() + ". New location: " + processedFile.getAbsolutePath(), e);
        }

        try {
            log.debug("Will write file with error information to: " + errorMessageFile.getAbsolutePath());
            FileUtils.writeStringToFile(errorMessageFile, "Generated by " + LocalVersionReader.getInstalledSoftwareAndVersion() + System.lineSeparator() + System.lineSeparator() + message, "UTF-8");
        } catch (IOException e) {
            throw new CallbackException("Error when writing error information file: " + errorMessageFile.getAbsolutePath(), e);
        }

    }





}
