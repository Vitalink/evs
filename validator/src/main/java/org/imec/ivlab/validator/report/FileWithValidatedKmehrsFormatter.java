package org.imec.ivlab.validator.report;

import com.inamik.text.tables.GridTable;
import com.inamik.text.tables.SimpleTable;
import com.inamik.text.tables.grid.Border;
import com.inamik.text.tables.grid.Util;
import org.imec.ivlab.core.version.LocalVersionReader;
import org.imec.ivlab.validator.scanner.model.FileWithValidatedKmehrs;
import org.imec.ivlab.validator.scanner.model.ValidatedKmehr;
import org.imec.ivlab.validator.validators.business.rules.model.ExecutionStatus;
import org.imec.ivlab.validator.validators.business.rules.model.RuleResult;
import org.imec.ivlab.validator.validators.model.AbstractValidationItem;
import org.imec.ivlab.validator.validators.model.ValidationResult;
import org.imec.ivlab.validator.validators.xsd.model.XsdFailure;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.PrintStream;
import java.util.List;
import java.util.Objects;

import static com.inamik.text.tables.Cell.Functions.HORIZONTAL_CENTER;

public class FileWithValidatedKmehrsFormatter {


    public static String getOutput(List<FileWithValidatedKmehrs> filesWithValidatedKmehrs) {
        StringBuffer sb = new StringBuffer();
        sb.append("Generated by " + LocalVersionReader.getInstalledSoftwareAndVersion() + System.lineSeparator() + System.lineSeparator());
        sb.append(createSummaryTable(filesWithValidatedKmehrs));
        sb.append(System.lineSeparator());
        sb.append(createValidationDetailsTable(filesWithValidatedKmehrs));
        return sb.toString();
    }

    private static int getFailedCount(List<FileWithValidatedKmehrs> filesWithValidatedKmehrs) {
        if (filesWithValidatedKmehrs.size() < 1) {
            return 0;
        }
        ValidatedKmehr validatedKmehr = filesWithValidatedKmehrs.get(0).getValidatedKmehrs().get(0);
        if (validatedKmehr.getValidationResult() != null) {
            return validatedKmehr.getValidationResult().getFailedRulesCount();
        } else {
            return 0;
        }
    }

    private static int getInterruptedCount(List<FileWithValidatedKmehrs> filesWithValidatedKmehrs) {
        if (filesWithValidatedKmehrs.size() < 1) {
            return 0;
        }
        ValidatedKmehr validatedKmehr = filesWithValidatedKmehrs.get(0).getValidatedKmehrs().get(0);
        if (validatedKmehr.getValidationResult() != null) {
            return validatedKmehr.getValidationResult().getInterruptedRulesCount();
        } else {
            return 0;
        }
    }

    private static String createSummaryTable(List<FileWithValidatedKmehrs> filesWithValidatedKmehrs) {

        SimpleTable s = SimpleTable.of();

        s.nextRow()
                .nextCell()
                .addLine("").applyToCell(HORIZONTAL_CENTER.withWidth(20).withChar(' '))
                .nextCell()
                .addLine("Fail").applyToCell(HORIZONTAL_CENTER.withWidth(15).withChar(' '))
                .nextCell()
                .addLine("Interrupted").applyToCell(HORIZONTAL_CENTER.withWidth(15).withChar(' '));
        s.nextRow()
                .nextCell()
                .addLine("Rule execution")
                .nextCell()
                .addLine(String.valueOf(getFailedCount(filesWithValidatedKmehrs)))
                .nextCell()
                .addLine(String.valueOf(getInterruptedCount(filesWithValidatedKmehrs)));

        GridTable gridTable = s.toGrid();
        gridTable = Border.of(Border.Chars.of('+', '-', '|')).apply(gridTable);
        return tableToString(gridTable);

    }

    private static String createValidationDetailsTable(List<FileWithValidatedKmehrs> filesWithValidatedKmehrs) {

        SimpleTable s = SimpleTable.of();

        s.nextRow()
                .nextCell()
                .addLine("TransactionId")
                .nextCell()
                .addLine("RuleId").applyToCell(HORIZONTAL_CENTER.withWidth(10).withChar(' '))
                .nextCell()
                .addLine("ExecutionStatus")
                .nextCell()
                .addLine("Level")
                .nextCell()
                .addLine("Message")
                .nextCell()
                .addLine("Filename")
                .nextCell()
                .addLine("Path");


        for (FileWithValidatedKmehrs fileWithValidatedKmehrs : filesWithValidatedKmehrs) {

            for (ValidatedKmehr validatedKmehr : fileWithValidatedKmehrs.getValidatedKmehrs()) {

                processValidationResult(validatedKmehr, s, fileWithValidatedKmehrs.getFile());

            }

        }

        GridTable gridTable = s.toGrid();
        gridTable = Border.of(Border.Chars.of('+', '-', '|')).apply(gridTable);
        return tableToString(gridTable);

    }

    private static String ensureNotNull(String string) {
        return string != null ? string : "";
    }

    private static void processValidationResult(ValidatedKmehr validatedKmehr, SimpleTable s, File file) {

        ValidationResult validationResult = validatedKmehr.getValidationResult();

        if (validationResult == null) {
            return;
        }

        for (AbstractValidationItem validationItem : validationResult.getFailedList()) {

            s.nextRow();

            if (validationItem.getClass().isAssignableFrom(RuleResult.class)) {
                RuleResult ruleResult = (RuleResult) validationItem;

                s
                        .nextCell().addLine(ensureNotNull(ruleResult.getTransactionId()))
                        .nextCell().addLine(ruleResult.getRuleId())
                        .nextCell().addLine(ruleResult.getExecutionStatus().name())
                        .nextCell().addLine(ruleResult.getLevel().name())
                        .nextCell().addLine(ruleResult.getMessage())
                        .nextCell().addLine(file.getName())
                        .nextCell().addLine(file.getAbsolutePath());

            }

            if (validationItem.getClass().isAssignableFrom(XsdFailure.class)) {
                XsdFailure xsdFailure = (XsdFailure) validationItem;

                s
                        .nextCell().addLine("")
                        .nextCell().addLine("")
                        .nextCell().addLine(ExecutionStatus.FAIL.name())
                        .nextCell().addLine(xsdFailure.getLevel().name())
                        .nextCell().addLine(xsdFailure.getMessage())
                        .nextCell().addLine(file.getName())
                        .nextCell().addLine(file.getAbsolutePath());

            }


        }

        for (RuleResult ruleResult : validationResult.getInterruptedList()) {

            s.nextRow();

            s
                    .nextCell().addLine(ensureNotNull(ruleResult.getTransactionId()))
                    .nextCell().addLine(Objects.toString(ruleResult.getRuleId(), ""))
                    .nextCell().addLine(ruleResult.getExecutionStatus().name())
                    .nextCell().addLine(ruleResult.getLevel().name())
                    .nextCell().addLine(ruleResult.getMessage())
                    .nextCell().addLine(file.getName())
                    .nextCell().addLine(file.getAbsolutePath());

        }

    }

    private static String tableToString(GridTable table) {
        ByteArrayOutputStream byteOut = new ByteArrayOutputStream();
        PrintStream outStream = new PrintStream(byteOut);
        Util.print(table, outStream);
        return byteOut.toString();
    }


}
